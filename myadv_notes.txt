
/* 
Goal is to have data on a map. Lines and stop-points on a map.

source data : the *.log files or data in a table (ora or pg)
output: a map to display in browser.

datamodel:  (actual docu in the sql-file!)
    load-table: load the log files in stageing tables, 
    route-table: order/parition by Date (and time), select-into
    for large volumes: convert by sqlldr into load-table, and exch-part

    tables:
    - gps-files : just file metadata, id, zipname, earliest date + trip (a file belongs to 1 trip?)
    - gps_lines : gprmc data, belonging to file_id (this can be temp, when moved to trip_map_pos(

    - trips     trp
    - trip_legs tlg (optional)
    - trip_leg_positions tlp (can be links to existing data-points in file-lines)
    - trip_map_positions tmp (derived, less points then in leg-pos, save on kml/gpx data
    - trip_map_stops     tms (derived)

refinements:
    have tables for zip+log files, to know where each point came from.
    plan to display filename with the routes, possibly sections of routes per file.
    reduce points: for every 3 points, if "direction" and "speed" of middle point are similar: skip it. 

implement
 - create a GPRMC table (just type GPRMC is enough for the moment)
 - sqlldr to load, potentially also external file
 - use DT to select-order into data table, use seq to catch doubles.
 - create master route table, possibly partition by yyyymmdd-ddd-sequece
 - generate google line elemets, per day? from route-table
 - beautify: use stops, time-gaps etc.. to determine more details.

todo:
 - add ele(vation) to gps-line
 - store speed in km/h instead of kt.
 - re-arrange order of columns : lon, lat, ele, then the rest.
 - measuring time during inserts.. doesnt work well ??

todo 2024:
 - 10sec instead of 1min intervals ?
 - arrows on lines ? 
 - hourly point ? messy, but informative
 - create maps (can use layers for muliple trips)
 - blogpost with links for quick access !

List of sources:
 - consider 1 python-program per source, but some are shared components.
 - myadv-Stoyan, datadump: contains subdirs per trip, subdir=triptitle, program works, takes abt 2hr to load.
 - my-adv from phone : zipfiles, and need to link each file to zip: consider creating subdirs per trip as Stoyan did
 - Ramblr: GPX, 1 file per trip. Filename= triptitle, any woy to get complete arcive ?
 - Endomondo: 1 file per trip, filename=triptitle, better: TCX from Downloade zipfile
 - runkeeper: 1 gpx per activity, so trip = file ( working ) 
 - sportstracker: check the gpx files

 - consider a "struct" to hold GPRMC records (including chksum, including read-trick)

 - Ramblr... : check the file
 - Endomondo: check the file

notes: 
 - Accuracy: a 1 min interval is too long, 10 sec interval is about right.
 - estimate: later use distance, speed and heading to determine if a point is relevant. 
   when going "straight, a lot of poitns can be skipped
 - consider adding metadata or notes to file: where-from, what tools etc.. 
 - question: should we link file-trip or point-trip... 
    using point-trip allows (future sources) for 1 file to contain multiple trips
 - what constitutes a stop? how-long, and what-distnaces.. (e.g. see the jumps when measurements are inside buildings)
 - not al points have a dt-measured, and thus depend on file-name or other data to determine DT.
 - write a file-checker: check for valid NMEA records via checksum and value-limits, spot problems
 - need pl-sql or other code to generate KML per trip

*/ 

table:  see ct_gprmc.sql

how to get lat + long: 
select
  round (   trunc ( g.lat / 100 ) 
         +  mod ( g.lat / 100, 1 ) * 100/60, 6  ) as lat_dec
, ' ,  ' as komma 
, round (   trunc ( g.lon / 100 ) 
         +  mod ( g.lon / 100, 1 ) * 100/60, 6 ) as lon_dec
-- , g.* 
from gprmc g 
order by g.utc_hhmmss ; 


-- notes 2024.. saving trips per KML.

rd_myadv.py worked : using oracledb, edit file-paht, and it Works ! 
10M rows. 2100 hours of moto-time. 100 trips
the exported .dmp file is on drive.google.com 

next is : making maps for each trip. with 10sec or 1min interval

Trip must have.. 
 - Name (from subdir title, remove number): in table)
 - start + end date. Start=known, End=from latet file : see trip.sql
 - start point: put placemark with name, date.: 
        min(date) for trip => placemark: select min-point. 
 - daily endpoint: last point of the day, put placemark down, with Date! 
        max (date) per day. => placemark
        up to about 50 placemarks per trip
 - line per day or per hr: with 1min or 10sec interval ? 
        refine interval later..
        note we need 4 or 5 digit precision on lat/lon 
        max 50 lines per trip..
 - optional: loc-placemarks: start with 1 per hr ? 
 - optional: line-style, more readable than thin-line? 

helper tables:
  - out_trip.._, including start (placemark)
  - out trip_day: with line and max placemark per day
  - out trip_day_point: location every 10sec, order by date to draw line
  - [...] out_trip_hr: placemark per hr
 
 



kml file for trip:
 - write start loc (plsql call usind dbms_output)
 - loop over distinct days in the trip (for-select)
    - write out day: startpoint
    - write out day: line (possibly per distinct hr?)
 - [ optional: kms or time per day ] 

